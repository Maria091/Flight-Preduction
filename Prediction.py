{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "09c75ec1-4876-4908-907f-412ad1c6cef4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7f8a6e93-5c55-425f-bb1a-777fefb09fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = pd.read_excel(\"Data_Train.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bc62e60e-e32b-4368-b2e6-1faeedca79fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "19767abb-9f0e-4296-8f5e-5029e500a741",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops Additional_Info  Price  \n",
       "0    22:20  01:10 22 Mar   2h 50m    non-stop         No info   3897  \n",
       "1    05:50         13:15   7h 25m     2 stops         No info   7662  \n",
       "2    09:25  04:25 10 Jun      19h     2 stops         No info  13882  \n",
       "3    18:05         23:30   5h 25m      1 stop         No info   6218  \n",
       "4    16:50         21:35   4h 45m      1 stop         No info  13302  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9909a46b-b4cd-450a-9cbb-178986f5fea3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 10683 entries, 0 to 10682\n",
      "Data columns (total 11 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   Airline          10683 non-null  object\n",
      " 1   Date_of_Journey  10683 non-null  object\n",
      " 2   Source           10683 non-null  object\n",
      " 3   Destination      10683 non-null  object\n",
      " 4   Route            10682 non-null  object\n",
      " 5   Dep_Time         10683 non-null  object\n",
      " 6   Arrival_Time     10683 non-null  object\n",
      " 7   Duration         10683 non-null  object\n",
      " 8   Total_Stops      10682 non-null  object\n",
      " 9   Additional_Info  10683 non-null  object\n",
      " 10  Price            10683 non-null  int64 \n",
      "dtypes: int64(1), object(10)\n",
      "memory usage: 918.2+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "12f2cbd3-b839-4c08-9636-8e647850eadc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Duration\n",
       "2h 50m     550\n",
       "1h 30m     386\n",
       "2h 45m     337\n",
       "2h 55m     337\n",
       "2h 35m     329\n",
       "          ... \n",
       "31h 30m      1\n",
       "30h 25m      1\n",
       "42h 5m       1\n",
       "4h 10m       1\n",
       "47h 40m      1\n",
       "Name: count, Length: 368, dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Duration\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c27981e9-d7d5-4372-a9cf-047b14e18231",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Route              1\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        1\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()\n",
    "\n",
    "# This command checks for null (missing) values in each column of the DataFrame and returns the count of null values for each column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "8570c390-83b0-4325-a49b-2c8dfba1ec9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>10683.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9087.064121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>4611.359167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1759.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>5277.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8372.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12373.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>79512.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Price\n",
       "count  10683.000000\n",
       "mean    9087.064121\n",
       "std     4611.359167\n",
       "min     1759.000000\n",
       "25%     5277.000000\n",
       "50%     8372.000000\n",
       "75%    12373.000000\n",
       "max    79512.000000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "84b85585-fde1-4d77-b355-5efa5fe14868",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data.dropna(inplace=True)\n",
    "\n",
    "# This command removes all rows from the DataFrame that contain any null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e4480c4e-0c4c-4579-a7ce-9cfdb090273b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline            0\n",
       "Date_of_Journey    0\n",
       "Source             0\n",
       "Destination        0\n",
       "Route              0\n",
       "Dep_Time           0\n",
       "Arrival_Time       0\n",
       "Duration           0\n",
       "Total_Stops        0\n",
       "Additional_Info    0\n",
       "Price              0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7413bfb0-b2c0-4d90-b892-6c565788aa84",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[\"Journey_day\"] = pd.to_datetime(train_data.Date_of_Journey, format=\"%d/%m/%Y\").dt.day"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7d9db1aa-bbf2-44fc-b894-e11e3b8b15f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data[\"Journey_month\"] = pd.to_datetime(train_data[\"Date_of_Journey\"], format = \"%d/%m/%Y\").dt.month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d8613d42-2405-46a4-83ef-b6d369088003",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>24/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>22:20</td>\n",
       "      <td>01:10 22 Mar</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>1/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>05:50</td>\n",
       "      <td>13:15</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>9/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>09:25</td>\n",
       "      <td>04:25 10 Jun</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>18:05</td>\n",
       "      <td>23:30</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>01/03/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>16:50</td>\n",
       "      <td>21:35</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline Date_of_Journey    Source Destination                  Route  \\\n",
       "0       IndiGo      24/03/2019  Banglore   New Delhi              BLR → DEL   \n",
       "1    Air India       1/05/2019   Kolkata    Banglore  CCU → IXR → BBI → BLR   \n",
       "2  Jet Airways       9/06/2019     Delhi      Cochin  DEL → LKO → BOM → COK   \n",
       "3       IndiGo      12/05/2019   Kolkata    Banglore        CCU → NAG → BLR   \n",
       "4       IndiGo      01/03/2019  Banglore   New Delhi        BLR → NAG → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops Additional_Info  Price  \\\n",
       "0    22:20  01:10 22 Mar   2h 50m    non-stop         No info   3897   \n",
       "1    05:50         13:15   7h 25m     2 stops         No info   7662   \n",
       "2    09:25  04:25 10 Jun      19h     2 stops         No info  13882   \n",
       "3    18:05         23:30   5h 25m      1 stop         No info   6218   \n",
       "4    16:50         21:35   4h 45m      1 stop         No info  13302   \n",
       "\n",
       "   Journey_day  Journey_month  \n",
       "0           24              3  \n",
       "1            1              5  \n",
       "2            9              6  \n",
       "3           12              5  \n",
       "4            1              3  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f489b0af-56aa-4a10-912a-55a7f629892f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since we have converted Date_of_Journey column into integers, Now we can drop as it is of no use.\n",
    "\n",
    "train_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "fafd7039-cdff-499f-9c02-7b1dd048bd7e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\569228883.py:5: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  train_data[\"Dep_hour\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.hour\n",
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\569228883.py:8: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  train_data[\"Dep_min\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.minute\n"
     ]
    }
   ],
   "source": [
    "# Departure time is when a plane leaves the gate. \n",
    "# Similar to Date_of_Journey we can extract values from Dep_Time\n",
    "\n",
    "# Extracting Hours\n",
    "train_data[\"Dep_hour\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.hour\n",
    "\n",
    "# Extracting Minutes\n",
    "train_data[\"Dep_min\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.minute\n",
    "\n",
    "# Now we can drop Dep_Time as it is of no use\n",
    "train_data.drop([\"Dep_Time\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c801327d-784c-4923-8759-48141c91717e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1117634591.py:5: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  train_data[\"Arrival_hour\"] = pd.to_datetime(train_data.Arrival_Time).dt.hour\n",
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1117634591.py:8: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  train_data[\"Arrival_min\"] = pd.to_datetime(train_data.Arrival_Time).dt.minute\n"
     ]
    }
   ],
   "source": [
    "# Arrival time is when the plane pulls up to the gate.\n",
    "# Similar to Date_of_Journey we can extract values from Arrival_Time\n",
    "\n",
    "# Extracting Hours\n",
    "train_data[\"Arrival_hour\"] = pd.to_datetime(train_data.Arrival_Time).dt.hour\n",
    "\n",
    "# Extracting Minutes\n",
    "train_data[\"Arrival_min\"] = pd.to_datetime(train_data.Arrival_Time).dt.minute\n",
    "\n",
    "# Now we can drop Arrival_Time as it is of no use\n",
    "train_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "51eec8dd-98a2-4a24-a002-94927f60d64b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>7h 25m</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>19h</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>5h 25m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>4h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route Duration  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL   2h 50m   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR   7h 25m   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK      19h   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR   5h 25m   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL   4h 45m   \n",
       "\n",
       "  Total_Stops Additional_Info  Price  Journey_day  Journey_month  Dep_hour  \\\n",
       "0    non-stop         No info   3897           24              3        22   \n",
       "1     2 stops         No info   7662            1              5         5   \n",
       "2     2 stops         No info  13882            9              6         9   \n",
       "3      1 stop         No info   6218           12              5        18   \n",
       "4      1 stop         No info  13302            1              3        16   \n",
       "\n",
       "   Dep_min  Arrival_hour  Arrival_min  \n",
       "0       20             1           10  \n",
       "1       50            13           15  \n",
       "2       25             4           25  \n",
       "3        5            23           30  \n",
       "4       50            21           35  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b1cfcc87-3d2f-4909-a5a7-8f444ab021a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assigning and converting Duration column into list\n",
    "duration = list(train_data[\"Duration\"])\n",
    "\n",
    "for i in range(len(duration)):\n",
    "    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n",
    "        if \"h\" in duration[i]:\n",
    "            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n",
    "        else:\n",
    "            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n",
    "\n",
    "duration_hours = []\n",
    "duration_mins = []\n",
    "for i in range(len(duration)):\n",
    "    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n",
    "    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "cc663fcb-b04d-42af-9d6c-4ae38a00ad30",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Adding duration_hours and duration_mins list to train_data dataframe\n",
    "\n",
    "train_data[\"Duration_hours\"] = duration_hours\n",
    "train_data[\"Duration_mins\"] = duration_mins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "edb13cb7-e761-409f-a66f-16aafe107a24",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data.drop([\"Duration\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "a8b82aa6-8d5e-4f3d-82df-055b5c0d9150",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "      <th>Duration_hours</th>\n",
       "      <th>Duration_mins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → IXR → BBI → BLR</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → LKO → BOM → COK</td>\n",
       "      <td>2 stops</td>\n",
       "      <td>No info</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → NAG → BLR</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>BLR → NAG → DEL</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination                  Route Total_Stops  \\\n",
       "0       IndiGo  Banglore   New Delhi              BLR → DEL    non-stop   \n",
       "1    Air India   Kolkata    Banglore  CCU → IXR → BBI → BLR     2 stops   \n",
       "2  Jet Airways     Delhi      Cochin  DEL → LKO → BOM → COK     2 stops   \n",
       "3       IndiGo   Kolkata    Banglore        CCU → NAG → BLR      1 stop   \n",
       "4       IndiGo  Banglore   New Delhi        BLR → NAG → DEL      1 stop   \n",
       "\n",
       "  Additional_Info  Price  Journey_day  Journey_month  Dep_hour  Dep_min  \\\n",
       "0         No info   3897           24              3        22       20   \n",
       "1         No info   7662            1              5         5       50   \n",
       "2         No info  13882            9              6         9       25   \n",
       "3         No info   6218           12              5        18        5   \n",
       "4         No info  13302            1              3        16       50   \n",
       "\n",
       "   Arrival_hour  Arrival_min  Duration_hours  Duration_mins  \n",
       "0             1           10               2             50  \n",
       "1            13           15               7             25  \n",
       "2             4           25              19              0  \n",
       "3            23           30               5             25  \n",
       "4            21           35               4             45  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ad6e878f-745a-4eb3-a8fb-11b6f2f51ea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Airline\n",
       "Jet Airways                          3849\n",
       "IndiGo                               2053\n",
       "Air India                            1751\n",
       "Multiple carriers                    1196\n",
       "SpiceJet                              818\n",
       "Vistara                               479\n",
       "Air Asia                              319\n",
       "GoAir                                 194\n",
       "Multiple carriers Premium economy      13\n",
       "Jet Airways Business                    6\n",
       "Vistara Premium economy                 3\n",
       "Trujet                                  1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Airline\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "f0deb72c-e653-497e-a6aa-48086239a412",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1443774528.py:2: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(x='Airline', y='Price', data=train_data, estimator='mean', palette='crest')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x='Airline', y='Price', data=train_data, estimator='mean', palette='crest')\n",
    "plt.title('Bar Plot of Average Airline Prices')\n",
    "plt.xticks(rotation=45)\n",
    "plt.ylabel('Average Price')\n",
    "plt.tight_layout()  # Adjust layout to fit labels\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "3046d247-78a0-441c-87f6-83bc54a29af1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a pivot table for the heatmap\n",
    "price_pivot = train_data.pivot_table(values='Price', index='Airline', aggfunc='mean')\n",
    "\n",
    "# Create a heatmap\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.heatmap(price_pivot, annot=True, fmt=\".1f\", cmap='coolwarm')\n",
    "plt.title('Heatmap of Average Prices by Airline')\n",
    "plt.ylabel('Airline')\n",
    "plt.xlabel('Average Price')\n",
    "plt.tight_layout()  # Adjust layout to fit labels\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "db6977fa-db0f-413f-b537-fb9fa03f9bab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>Airline_SpiceJet</th>\n",
       "      <th>Airline_Trujet</th>\n",
       "      <th>Airline_Vistara</th>\n",
       "      <th>Airline_Vistara Premium economy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Airline_Air India  Airline_GoAir  Airline_IndiGo  Airline_Jet Airways  \\\n",
       "0              False          False            True                False   \n",
       "1               True          False           False                False   \n",
       "2              False          False           False                 True   \n",
       "3              False          False            True                False   \n",
       "4              False          False            True                False   \n",
       "\n",
       "   Airline_Jet Airways Business  Airline_Multiple carriers  \\\n",
       "0                         False                      False   \n",
       "1                         False                      False   \n",
       "2                         False                      False   \n",
       "3                         False                      False   \n",
       "4                         False                      False   \n",
       "\n",
       "   Airline_Multiple carriers Premium economy  Airline_SpiceJet  \\\n",
       "0                                      False             False   \n",
       "1                                      False             False   \n",
       "2                                      False             False   \n",
       "3                                      False             False   \n",
       "4                                      False             False   \n",
       "\n",
       "   Airline_Trujet  Airline_Vistara  Airline_Vistara Premium economy  \n",
       "0           False            False                            False  \n",
       "1           False            False                            False  \n",
       "2           False            False                            False  \n",
       "3           False            False                            False  \n",
       "4           False            False                            False  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# As Airline is Nominal Categorical data we will perform OneHotEncoding\n",
    "\n",
    "Airline = train_data[[\"Airline\"]]\n",
    "\n",
    "Airline = pd.get_dummies(Airline, drop_first= True)\n",
    "\n",
    "Airline.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3f7dbf26-a13a-4c92-80a7-b8ec36513359",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source_Chennai</th>\n",
       "      <th>Source_Delhi</th>\n",
       "      <th>Source_Kolkata</th>\n",
       "      <th>Source_Mumbai</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Source_Chennai  Source_Delhi  Source_Kolkata  Source_Mumbai\n",
       "0           False         False           False          False\n",
       "1           False         False            True          False\n",
       "2           False          True           False          False\n",
       "3           False         False            True          False\n",
       "4           False         False           False          False"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# As Source is Nominal Categorical data we will perform OneHotEncoding\n",
    "\n",
    "Source = train_data[[\"Source\"]]\n",
    "\n",
    "Source = pd.get_dummies(Source, drop_first= True)\n",
    "\n",
    "Source.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "49fd725d-c63a-4f07-89b0-9fea583409d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Destination\n",
       "Cochin       4536\n",
       "Banglore     2871\n",
       "Delhi        1265\n",
       "New Delhi     932\n",
       "Hyderabad     697\n",
       "Kolkata       381\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Destination\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "4e3d8b95-aa49-4bbd-8d06-d80c863533cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\457549824.py:6: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(x=\"Source\", y=\"Price\", data=average_price, palette=\"viridis\")\n"
     ]
    },
    {
     "data": {
      "image/png": "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q5YWL16s4cOHq2HDhvr8888dXS6QJidOnNDgwYN17do1jRgxQs8995yke+FAWFiYFi5cqLFjx+qNN96QJMXFxcnDw8ORJQN2KSHA9u3btXnzZv3yyy+qXLmyqlSpoldeeUVff/215s6dm+oygblz5+rll19W8eLFHVw98PhiYmLUtWtX1ahRQ+3atdO1a9fUunVr3b17VzExMZo+fboqV66sxMRE3b59W5JSXRoDZGYp5/ikpCQ1a9ZMd+/e1euvv64rV65o2LBh9nbffPONZs6cqRdeeEF9+vTR1q1b5eLiIj8/P+4QkMGI05FlHTt2TFu2bNGkSZPUtm1bhYaGavjw4XrnnXfUo0cPnTx5Uu+995569eqlM2fOcA91PDFSxur169fl5eWlc+fOpbqHtK+vrzp27KjWrVurZ8+eWrVqlSQRAiBTMZlM2rhxo7p27Srp3gKAu3fvVs+ePXX27Fk1atRIbdu21fHjx9WuXTtJUps2bQgBkGXcuXNHJ0+eVPny5ZWUlKTJkyercuXKWrp0qUqUKKGPP/5YK1asUExMjHx8fAgB8EQxmUyyWCxycXHRkiVL5ObmpmnTpuncuXOpFuF+/fXXFRAQoB9++EGSVL16db3wwguEAP8BggBkCd27d9cnn3ySalt0dLRu3LiR6hdn/vz51aFDBz399NP67rvvJEktWrTQggUL7IsKAplVyvhMSkqSJL3wwgvq2rWrXnzxRfXv39++IKB0b6y3adNGHTt2VNmyZR1SL5Diz+dWq9Uqm82myMhITZw4UT179lT//v3Vtm1bXb582b4mQFRUlJo0aaKmTZvq1q1bioyMdFT5wGNLGfeS9NtvvykuLk65cuVSjRo1lJiYqA0bNigmJkb169dXvnz55OPjo8jISI0fP567u+CJ5ezsLKvVKhcXF0VERKhixYo6efKk9u/fL4vFYm9XqVIlWa1W+x298N8gCMATLzk5WYGBgVq3bp2GDx9u3x4bG6ukpCT7dLqU9LFo0aJydXVVbGysJMnV1TXVnQWAzChlfO7YsUODBg1Sv379tGfPHj377LPq27evKlasqP79+2vHjh32Y5566il1796db1DhcHfv3tW1a9eUkJAgi8ViP+cmJibq9ddf1/nz51WnTh3VrFlT7du31+zZs7V48WK5urqqefPmmjNnjnx9fR39MoA0O3LkiO7evSsnJyeZTCYdPXpU7dq109WrV5UtWzZ1795dVatW1bfffitvb28FBgZKknLkyKFp06bpf//7HzMB8MRJCb2OHTumXbt26ZdffpGzs7MWLFigPHny6PPPP9fhw4eVmJgoSdq9e7dy5colNzc3R5ZtOAQBeOKZzWY1bdpUgwcP1qJFi+zXHdWqVUt58+bV8OHDdfXqVfvCUnfu3JGbm5uKFCmSqh9CAGRmJpNJmzdvVocOHXTlyhX98MMPCg0N1YoVK1SyZEmFhITI399fAwYM0NatW+3Hmc1mB1YN3Luuv0uXLnrzzTf16quv6pNPPtGePXvk6uqqK1eu6Ndff1W7du1UvXp1DR061L5g4MGDB5WUlKTs2bMrZ86cjn4ZQJp9++23atu2rVauXKm4uDhJ92Z0OTk5ydPTUzabTfnz55ck3bx5U8nJybp586YmTpyoHTt26JlnnpG3t7cjXwLwSEwmk77//ns1b95cffr0Ufv27bVo0SK5uLho5cqVSkpKUqdOndSqVSv16tVL3377rQYMGKBs2bI5unRDYbFAPNH+fHcASVq2bJkGDx6spk2basCAATpy5Ii6du0qDw8PNW3aVNmzZ9e6det0/fp1RUREcGtAZHopMwFiYmL0ySefqHr16mrWrJkkqXPnzjp79qw6dOigxo0b6/jx4xo2bJhu3bqlpUuXyt3dnYALDvXFF19o9erVat++vZ566ikdPXpUP/30k06cOKFRo0bp559/1ooVK1SvXj1NmDDBflz37t2VK1cuDRgwgLsD4Ills9nUuXNnXbhwQUFBQXrnnXd05swZ9e7dW2vXrpWLi4skyWKxaMyYMVq1apXc3NxktVo1ffp0VkvHE+v27dt6//339d5778nPz09btmzRnDlz9Nlnn6lly5ZKSkpS27ZttXfvXg0dOlRVq1ZVoUKFHF224fApCE8sm81m/wNxzZo18vf317vvvitJGjx4sFxcXPTJJ59o7ty5GjBggObOnaucOXOqcOHCmjFjhpydnZWcnMw3psjUTCaTdu/erTFjxshkMqlMmTL2fRMnTlS3bt00c+ZMOTk5qWHDhurfv7+8vLxYGBAON2zYMK1atUqzZ89WuXLlJEmvvfaaateurTlz5qhnz55q2rSp3nrrLe3YsUMbN26UxWLRwYMHtW3bNi1evJgQAE+kadOmSZI++OADTZ8+XV26dNG8efPk7OysIkWKKDY2VpMnT1bdunXl5eWlwoULKzQ0VDVq1JDFYlHRokVVsGBBB78KIG1SvriIiopSdHS0/P39Va9ePXl5ecnPz082m01DhgyRzWZTUFCQZs+eraCgIL3wwguMdwchCMAT6c8zAQ4cOKCvv/5abm5uGjp0qD0MGDRokKxWq/r166c5c+YoKipK7u7u8vLysq9kyowAPAlKlSqlK1eu6PLlyzp9+rR98T9XV1dNnjxZ3bt31xdffCFnZ2e9/fbbDq4WuHfr1uXLl2vVqlXy8/Ozr9Hi5OSk8uXLq2vXrjKZTFq/fr0+/PBDOTs7q3v37ipQoIB8fHy0YMEC1rbAEykuLk7Xr1/XwoUL5eHhoTZt2mjatGnq0qWLFixYoCpVqujatWvaunWr5syZI2dnZ5UoUULe3t5q0KCBXnvtNUe/BOCRmEwmfffddxo/frzu3Lmja9euqVmzZqpUqZLy58+vtm3bymQyacSIEUpISFD79u21dOlSR5dtaFwagCfOnxf1mzRpknbv3q0LFy4oKipKL7zwgvr166dixYrZLxNo3ry5+vfvn6qPv15SAGR2t2/fVpMmTWQymTRkyBAFBATY/zuwWCwKDQ1VSEiIChcu7OBKYXRRUVGqUaOG6tevr379+il37tz3bZey8OXrr7+u7t2769SpU/Lx8ZHZbJaXl9d/XDWQfq5evaqFCxdqxowZ6tu3r/32l507d9b27duVO3duLVmyRFevXtXp06e1b98+nTx5UkOHDlWxYsUcXD3waI4ePaqOHTuqcePGypUrl8aOHauaNWuqe/fu9nEdFRWlKVOmaP369dq0aZNy5MjB3+MORBCAJ9b8+fM1adIkjRkzRn5+ftq5c6e+//57Wa1W9e/fX8WKFdPy5cvVv39/ffrpp2rdurWjSwYeKCXoOnLkiI4cOaLIyEiVLFlSdevW1Z07d9SwYUO5u7tr4MCBev7551kDAJnS3r171bt3b9WrV09BQUF6+umn7fv+HOb26tVLv//+u1asWEFAiyzl6tWrmj9/vmbOnKnQ0FC1bdtW0r0xv2nTJn388cdq2LCh3NzcZLPZUl3uCDxpzp07p/Xr1ysmJkahoaGS7v0eaNOmjWrVqqWQkBB7GHDlyhWZzWbuhpEJcMbBE8dms8lisWjv3r1q0aKFqlevLj8/PzVr1kwtWrTQ7du3NXz4cJ0/f15NmjTR1KlT9d577zm6bOChpKy027lzZ/3vf//ToUOH1LVrVw0ePFienp6KiIhQXFychg8frl27doksF5lRQECAxowZo3Xr1unrr7/WhQsX7PtSbh0oST4+PvY7AvAhCFlJ3rx51aZNG7Vv315ffPGF5syZI0kaM2aMXnzxRS1cuFALFy5UXFycTCYT4x9PJKvVqtu3b6tfv3766quv9Pvvv9v3BQQEaO7cudq8ebMmT56sEydOSJLy5ctHCJBJcNbBE8dkMslsNis2Nla3bt2S9H/3K61du7aqVKmibdu2aciQITpz5oxq1aolFxcXWSwWB1YNPJxjx45p4MCB+uCDD7RgwQL7qukFCxZUVFSUvLy8FBERofPnz2vChAlKSEhwdMnAfT3//POaMGGC1q5d+7cwQJL9Vmnly5eXJEItPNFSxm9UVJROnDih33//Xe7u7urdu7fatm2rL774QrNnz5YkTZ06Vblz59a6deuUlJTkyLKBxxIbG6scOXIoNDRUFSpU0LFjx7RmzRr7/pQw4JtvvtGsWbOUmJjowGrxV6yUhkzvftNFTSaTChYsqJ9//lmXLl3SU089Zd9XpEgRlS1bVhaLRXPnztUnn3wiDw8PFgbEE+HixYt69tln9d5779lvOfXuu+/q3Xff1cCBA/XWW2+pdu3a+uGHH3T9+nW5u7s7umTgH6WEASEhIZKkli1b6umnn5bJZLKv8TJv3jxJ4jIXPJFSAgCTyaQNGzbYF0pLTEzUU089pWHDhik0NFQmk0mjRo2Sk5OT2rRpo/nz5ysyMpL1MPDE+u2339S6dWvNmDFDAQEB6tu3r0aMGKHw8HCZzWa98cYbku6FAYsXL5aXl5dcXV0dXDX+jBkByNT+HAKsXr1aEydO1Pz58yVJffv2lZubm7p166YTJ04oOjpa8fHx2rBhg2rUqKFq1appy5YtiomJceRLANLk5s2bun79ug4fPqzWrVurRo0aGjRokJycnHT8+HEdOHBAkuTp6Sk/Pz8HVws82F9nBty4cUPTpk3T7NmzNW3aNBUpUsTRJQJp9ssvv+jOnTsymUwymUzatWuX+vbtq3fffVfTpk3TJ598ohw5cigoKEgnTpxQ7969FRwcrJEjR+rrr7+WJPn6+jr4VQCPzsfHR2XLllW3bt3066+/qnTp0urbt6+cnJy0cOFCffvtt/a2lSpVYiHMTIjFApFp/XlBqS+++ELh4eEqXLiwjh8/rtq1a2vw4MG6fv26QkNDde3aNXl6esrNzU3x8fH67rvvdPbsWX344YeaPn16qoWqgMwgOTlZTk5OMplMSkpKkouLi6R7f1z27t1bMTExqlu3rkaMGCFJSkxMVMuWLdW4cWM1b97ckaUDj2Tfvn3q3bu3PD09deHCBS1cuNB+K0zgSTJnzhwtXLhQ69ats8/KGjp0qCwWiwYNGmRvd+TIEfs5/KuvvtKdO3e0ZMkSvfbaa9weE0+MlL9RkpOTZTabJf3fF3VRUVEaOHCgfvnlF82YMUOVKlXSoUOHNHbsWF27dk0hISGqU6eOg18B/gkzApBppYQAly9f1rZt27RgwQItWLBAixcv1q5duzR48GDly5dPq1atUs+ePdWyZUu1bNlS69evlyQtXrxY2bNnty9EBWQGUVFRslqtMpvNMplM2rFjhz7//HMNGDBAv/zyi5577jm98cYbunPnjooVK6YLFy7oypUrmjx5si5fvqyXXnrJ0S8BeCTPP/+8Ro0apRs3big8PJwQAE+clO/Ofv/9dz311FNyd3dPtS3l+ufk5GRJUunSpfX666/rxIkTunbtmvLmzasPPviAEABPjK+//lrz5s3TnTt3ZDabtXv3bsXGxsrJyUlWq1X58+fXoEGDVKlSJXXu3Fn79+9XuXLlFBISooIFC+rZZ5919EvAv2BGADK1GTNmaP/+/XJ3d9cXX3xhv7Zo7969+uCDD/T8889r5MiRypUrlyRp165dOnz4sE6dOqWNGzdq/vz5nISQaSxYsEDz5s3TqFGj9Nxzz+nHH3/UBx98oGrVqmn//v3KkSOHevbsqTfeeENDhgzRhg0bdPPmTRUvXly3bt3SlClTVLp0aUe/DOCxxMfHs7YFnkgWi0XOzs4aMGCA/vjjD82aNcs+ezEkJETnz5/XypUrJcn+7enOnTs1cOBAzZ49WwULFnTwKwAe3p49e9SqVSv5+fmpVatWqlmzprp27aqrV6/q+++/V7Zs2ewzAy5evKiQkBDFxMRoxIgRCggIUGJiImsCZHLMCECmZbFY5O7urh07dujEiRP2Vf9tNpsCAgI0ffp07d+/Xx9++KFu3LghSdq5c6e2bNmi+Ph4LVq0iBAAmcprr72mhIQEDR06VNu2bdOiRYs0ePBgzZgxQzt27JCfn58mTpyo9evX67PPPtP06dM1ZMgQ9erVS+Hh4YQAyBIIAfCkSll0OCkpSfHx8bLZbLJarZKkLl266NKlS+ratWuqKdRbtmyRt7c3sxPxxPH19VW+fPl0/vx5ffvtt9q4caO6dOmiQoUKqUGDBvaZATabTYUKFVKxYsV08eJF9enTR/Hx8fZLHpF5MSMAmcb97g5gtVoVERGhwYMHKygoSB9//HGq/Tt37tTMmTM1Y8aMVHcF+PM114CjxcbG6saNGypYsKBiYmLUpEkTubu7y9XVVcOHD1epUqUkSXfv3lXXrl31xx9/qEuXLnrttddI0wHAwXbs2KGCBQuqcOHCkqR+/frp8uXL9tsBSlJcXJw2btyooUOHKm/evCpatKhsNpt27typhQsX2s/zwJMgZabLmjVrtHDhQiUlJSkpKUmNGzdW4cKFNWXKFN2+fVurV6+2h7vDhg1T7dq1VaJECfn4+Dj4FeBhMCMAmcKfQ4D169dr8uTJWrNmjW7duqV3331Xn3zyiebPn6/Ro0fbj7HZbKpatapmzZolZ2fnVPfiJQRAZjF37lz16tVLb7/9tipWrKj//e9/WrJkiSwWi44cOZLq3urZsmXT1KlT5efnp1GjRtlX3CWvBQDHiIyMVMeOHbVgwQKdPXtW0r2/MRISErRlyxZdvnxZd+/elYeHh9566y0tWrRIgYGBcnV1Vf78+bVkyRJCADxR/rxYd8mSJVWkSBH16tVLZcuW1aJFi3T+/Hl9+OGHypEjh+rXr6/58+frs88+0+rVq1WwYEFCgCcIMwLgcH+9O8CqVavk5eWlhIQE1axZUx999JHy5Mmjr7/+WiNGjFC7du3Us2dPB1cNPNjo0aO1Zs0adejQQV5eXoqLi1Pp0qVVvnx53bhxQ02aNJGXl5cGDhyoSpUq2Y+Lj49X37591adPH+54AQAOtnfvXvXq1Uv16tVT586dFRYWpjlz5sjZ2VnJycny9PRU0aJF5e/vr2LFiilnzpwKCAjg/I0nytWrV5U3b15JSnV5y+eff64TJ05o4cKFCg0N1YEDB9S8eXMVLVpUS5cu1eHDh5UnTx4NHTqUS3KfMAQBcLiUIGDWrFmaM2eOJkyYoOeff169e/fWTz/9pDfeeENdunRR3rx5tXjxYg0ePFgDBgxQixYtHF068I9Wr16tiRMnauzYsSpfvryk/5v5knLpys2bN/XOO+8ob9686t+/f6owAACQeezbt0/dunVTs2bNdOjQId24cUOjRo3SoUOHdPbsWR0/flxHjhxRVFSUXFxctGbNGhUpUsTRZQMPZerUqdq6dauqV6+u4ODgVJfbxsXFKTg4WM2bN1f9+vXVrVs3nTx5Uq1atVKDBg3s6wHkyJHDga8Aj4IgAA5x9+5dOTs7269/jomJUUhIiN544w29++67+u2339SrVy8VL15cx44dU40aNdSlSxf5+Pjo+++/V61atVKdpIDMIiXY+vzzz+Xi4qLQ0FCZTCb7rJc/279/v1xcXNSjRw95eXnp448/VkBAgAOqBgA8yN69e9W9e3fFxcWpXr16Gj58eKr9iYmJio2NVXJysvLkyeOgKoG0uXLliqpXry5JcnV1VfHixdWoUSO9/PLLKlKkiJKSkjRt2jSdO3dOY8aMkST16NFDP/30k0JDQ/Xuu+86snw8BtYIwH9uyJAh6ty5s9q1a6dRo0ZJkjw8PBQZGSkXFxddunRJCxcuVOPGjTV58mQ9++yzWrZsmdq0aaNz587p1VdflbOzs/0uAkBmk5iYqO3bt8vPz8++ou5fJSQk6PPPP9e6deu0fPlynTp1ShMnTlRCQoIDKgYAPEhAQICmTJmi2NhYnT9/XpGRkfZ9SUlJcnV1lbe3NyEAnij58uXTkiVLlDt3br3xxhvy9vbWli1b9P7772vJkiWKiYlR27ZttWfPHi1ZskSSNG7cOL366quqXLmyg6vH4yAIwH8qKChIBw4c0GuvvabChQtry5YtGjlypFxcXNSgQQMVL15c+/btU2xsrP2bUV9fX5UpU0Y1atRQoUKF7H0xIwCZkclkkqurq7Jly6YTJ05I0n3vhuHm5qZKlSpp79698vLy0qZNm/T555/Lzc3NEWUDAB5ChQoVFB4ernPnzmnu3Ln2BV9ZpBhPsgoVKmjixInat2+fypYtq5YtW6pt27aaOHGiunbtqqVLl6pTp07au3evbt68KUkaPny4/Pz8HFw5HgefpPCfad68uRITEzVnzhzlzJlTycnJGjt2rA4cOCBJ6tSpkyRp+vTpypMnj/166QsXLui1117T+++/Lyn1AiZAZmOz2ZScnKwSJUrowIEDOnnypEqUKJGqTUowYLFY5OTkpMTERPn4+LDSLgA8ASpWrKhx48apd+/eunv3rjp37qynnnrK0WUBjyUgIEAjRoxQz549lZCQoB49eqhmzZravHmz5s6dq5iYGMXHx+v999+Xt7e3o8tFOmBGAP4T7du31+3bt7VixQrlzJlTcXFxMpvNeumll3Tx4kVNnjxZn3zyiQ4dOqSYmBgdOXJEK1euVOvWrRUZGamgoCBJ9z5kEQIgMzOZTHJ2dlabNm10+vRpzZ49W9euXftbu6SkJN28eVPPPfecfa0MAMCTISAgQF988YV2797NORxZRkBAgMaOHavVq1drzJgxyp49u9q1a6d169YpKChI5cqVk6enp6PLRDphsUBkuLNnz+q1115TUFCQgoODlS9fPvu+jh076ujRoypSpIgiIyMVFxenNm3aaOPGjYqLi1O+fPk0bdo0ubi4MBMAT5yIiAgNHDhQr776qlq3bq2KFStKku7cuaOwsDAtX75c8+fP1zPPPOPYQgEAjyQuLk4eHh6OLgNIVyl3yXjzzTfVokUL+fn5yWq1KiEhgfGehRAE4D+xb98+9ejRQ/Xq1VOnTp2UJ08e++1HJk+eLF9fX5nNZrVo0UJ58+bVjBkzFBUVpXz58slkMslisbAmAJ44VqtV33zzjQYOHKhcuXLpmWeeUbZs2XT37l2dOnVKU6ZM4Z67AAAg09m3b5969eql6tWrq2PHjnr66acdXRLSGUEA/jP79u1TSEiIGjZsqGPHjunKlSuaMmWKfQHA5ORk9e3bV3fu3NGMGTPsx6Xcex14Up0/f17ffPONDhw4ILPZrEqVKqlu3br8UgUAAJnWrl27NHDgQC1cuJC7YWRBBAH4T+3du1fBwcFycXHRlClTFBAQYP+gb7FY1LZtW5UtW1ahoaGOLhUAAAAwNC5/ybr4mhX/qYCAAM2ZM0dms1mbNm3S+fPn7d/2f/DBB7p165Z69eolSfe99zrwpPrzeGZsAwCAJwEhQNbFjAA4xN69e9W9e3e9/fbbeu+99zR8+HCdOXNGa9euZWFAAAAAAMhABAFwmJQFBOPj45U3b16tWrVKLi4uLAwIAAAAABmIIAAOtWfPHk2cOFFz5syRs7MzIQAAAAAAZDCCADiczWbjFoEAAAAA8B8hCECmkBIGAAAAAAAyFncNQKZACAAAAAAA/w2CAAAAAAAADIQgAAAAAAAAAyEIAAAAAADAQAgCAAAAAAAwEO7VBgAA0uzEiROaNm2adu/erejoaOXKlUsBAQEKDg5W6dKlHV0eAAD4F9w+EAAApMnJkyfVtGlTlS9fXs2aNVOePHkUGRmphQsX6ujRo1qwYIEqVqzo6DIBAMA/IAgAAABp8umnn2rHjh36/vvv5eLiYt9+9+5dvf766ypZsqS++uorB1YIAAD+DWsEAACANLl27Zok6a/fJWTLlk2ffPKJXn/9dfu29evXq1GjRqpUqZJeeuklDRgwQNHR0fb9kyZNUsmSJf/2HCVLltSkSZMkSRcvXlTJkiU1Z84cvf7666pcubJWrFghSTp8+LA6dOig559/XlWrVlWPHj10+fJlez+3bt3SgAED9OKLL6pcuXJq2rSpduzYkX5vBgAATyCCAAAAkCY1a9bUpUuX1Lx5c3399dc6ffq0PRR47bXX1LBhQ0nS1KlT1aNHD1WoUEETJ07Uhx9+qO+++06tWrVSfHx8mp933Lhxat++vYYOHaqqVavq2LFjeu+99xQXF6eRI0fq888/15EjR9SuXTslJSUpISFB77//vjZt2qQePXpo8uTJ8vX1VYcOHQgDAACGxmKBAAAgTVq0aKGrV69q1qxZ+vzzzyVJ3t7eevnll9WqVStVqFBB0dHRmjZtmt59910NHDjQfqy/v79atmypFStWqEWLFml63ldffVVNmjSxPx45cqRy5syp2bNny83NTZLk6+ur7t276/jx4zpy5IiOHTumpUuXqkKFCpKk6tWrq1WrVho9erQiIiIe960AAOCJxIwAAACQZiEhIfrpp580ZswYNWnSRJ6enlqzZo2aNWumefPmaf/+/UpMTNRbb72V6riAgAAVLFhQu3btSvNz+vv7p3q8b98+Va9e3R4CSFL58uW1efNmlS1bVjt27FDevHlVpkwZWSwWWSwWJScn65VXXtHhw4dTXaIAAICRMCMAAAA8kpw5c+rNN9/Um2++KUk6cuSI+vbtq9GjR2vYsGGSpDx58vztuDx58uj27dtpfr6/9nXr1i35+Pj8Y/tbt27p6tWrKlOmzH33X716VTlz5kxzHQAAPOkIAgAAwEOLiopS48aNFRISonfffTfVvtKlS6t79+768MMPdf78eUn3FhYsVqxYqnZXr17V008/LUkymUySpOTkZJnNZklSbGzsQ9WSI0cO3bhx42/bf/zxR5UqVUo5cuRQkSJFNHr06PseX6hQoYd6HgAAshouDQAAAA8tT548cnZ21qJFi5SQkPC3/WfOnJGbm5tatmwpV1dXrVmzJtX+vXv36tKlS3ruueckSZ6enpKUaqX/X3755aFqCQgI0E8//aTExET7tuPHjys4OFiHDh1S5cqVdfnyZfn4+KhcuXL2fzt27FBYWJg9eAAAwGiYEQAAAB6a2WzWoEGD9OGHH6px48Zq2bKlihUrpri4OG3btk1ff/21QkJC5O3treDgYE2ePFkuLi6qXbu2Ll68qAkTJqh48eJq1KiRJKlGjRoaMWKEPvvsM3Xs2FGRkZGaPHmysmfP/sBaunTpombNmqljx456//33lZiYqAkTJqhMmTKqXr26LBaLFi5cqLZt26pz584qUKCAtm/frpkzZyooKEguLi4Z/XYBAJApmWx/vQkwAADAA/z222+aNWuW9u3bpxs3bsjV1VWlS5dWq1at9Oqrr9rbLV68WAsXLtS5c+eUK1cu1a1bV927d091bf6qVas0bdo0/fHHHypWrJj69u2rIUOGqH79+uratasuXryo2rVra8SIEfYAIcX+/fs1ZswYHTx4UNmzZ1eNGjXUu3dv+9oB169f15gxY/TDDz/o9u3bKliwoJo0aaJ27drJyYmJkQAAYyIIAAAAAADAQIjCAQAAAAAwEIIAAAAAAAAMhCAAAAAAAAADIQgAAAAAAMBACAIAAAAAADAQggAAAAAAAAyEIAAAAAAAAAMhCAAAAAAAwEAIAgAAAAAAMBCCAAAAAAAADIQgAAAAAAAAAyEIAAAAAADAQP4f6T26Aw4N5aAAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate average price for each source\n",
    "average_price = train_data.groupby(\"Source\")[\"Price\"].mean().reset_index()\n",
    "\n",
    "# Create the bar chart\n",
    "plt.figure(figsize=(12, 6))\n",
    "sns.barplot(x=\"Source\", y=\"Price\", data=average_price, palette=\"viridis\")\n",
    "plt.title(\"Average Price by Source\")\n",
    "plt.xlabel(\"Source\")\n",
    "plt.ylabel(\"Average Price\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "127ff96d-502b-47b7-8691-5110739eea9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Destination_Cochin  Destination_Delhi  Destination_Hyderabad  \\\n",
       "0               False              False                  False   \n",
       "1               False              False                  False   \n",
       "2                True              False                  False   \n",
       "3               False              False                  False   \n",
       "4               False              False                  False   \n",
       "\n",
       "   Destination_Kolkata  Destination_New Delhi  \n",
       "0                False                   True  \n",
       "1                False                  False  \n",
       "2                False                  False  \n",
       "3                False                  False  \n",
       "4                False                   True  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# As Destination is Nominal Categorical data we will perform OneHotEncoding\n",
    "\n",
    "Destination = train_data[[\"Destination\"]]\n",
    "\n",
    "Destination = pd.get_dummies(Destination, drop_first = True)\n",
    "\n",
    "Destination.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "c1d1c09f-fda9-47a0-9615-43386a8e8dcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0                    BLR → DEL\n",
       "1        CCU → IXR → BBI → BLR\n",
       "2        DEL → LKO → BOM → COK\n",
       "3              CCU → NAG → BLR\n",
       "4              BLR → NAG → DEL\n",
       "                 ...          \n",
       "10678                CCU → BLR\n",
       "10679                CCU → BLR\n",
       "10680                BLR → DEL\n",
       "10681                BLR → DEL\n",
       "10682    DEL → GOI → BOM → COK\n",
       "Name: Route, Length: 10682, dtype: object"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "train_data[\"Route\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "ae67cc6a-985e-4619-bf19-4e96815d00b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "68c0006d-3554-4ae4-90af-3d3197b7cb88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Total_Stops\n",
       "1 stop      5625\n",
       "non-stop    3491\n",
       "2 stops     1520\n",
       "3 stops       45\n",
       "4 stops        1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[\"Total_Stops\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "97b0544b-8b45-4a79-94f3-48bd8d02bf88",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1758178131.py:4: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  train_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n"
     ]
    }
   ],
   "source": [
    "# As this is case of Ordinal Categorical type we perform LabelEncoder\n",
    "# Here Values are assigned with corresponding keys\n",
    "\n",
    "train_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "6f270f3c-54af-4e1c-8181-72326c8c3d8b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "      <th>Duration_hours</th>\n",
       "      <th>Duration_mins</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination  Total_Stops  Price  Journey_day  \\\n",
       "0       IndiGo  Banglore   New Delhi            0   3897           24   \n",
       "1    Air India   Kolkata    Banglore            2   7662            1   \n",
       "2  Jet Airways     Delhi      Cochin            2  13882            9   \n",
       "3       IndiGo   Kolkata    Banglore            1   6218           12   \n",
       "4       IndiGo  Banglore   New Delhi            1  13302            1   \n",
       "\n",
       "   Journey_month  Dep_hour  Dep_min  Arrival_hour  Arrival_min  \\\n",
       "0              3        22       20             1           10   \n",
       "1              5         5       50            13           15   \n",
       "2              6         9       25             4           25   \n",
       "3              5        18        5            23           30   \n",
       "4              3        16       50            21           35   \n",
       "\n",
       "   Duration_hours  Duration_mins  \n",
       "0               2             50  \n",
       "1               7             25  \n",
       "2              19              0  \n",
       "3               5             25  \n",
       "4               4             45  "
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "2c5d8a05-c6ad-4be0-b768-6bda26478076",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenate dataframe --> train_data + Airline + Source + Destination\n",
    "\n",
    "data_train = pd.concat([train_data, Airline, Source, Destination], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "dad7e0db-271d-4c75-8802-efcf0e234bc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "      <th>Duration_hours</th>\n",
       "      <th>Duration_mins</th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>Airline_SpiceJet</th>\n",
       "      <th>Airline_Trujet</th>\n",
       "      <th>Airline_Vistara</th>\n",
       "      <th>Airline_Vistara Premium economy</th>\n",
       "      <th>Source_Chennai</th>\n",
       "      <th>Source_Delhi</th>\n",
       "      <th>Source_Kolkata</th>\n",
       "      <th>Source_Mumbai</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Air India</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>New Delhi</td>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Airline    Source Destination  Total_Stops  Price  Journey_day  \\\n",
       "0       IndiGo  Banglore   New Delhi            0   3897           24   \n",
       "1    Air India   Kolkata    Banglore            2   7662            1   \n",
       "2  Jet Airways     Delhi      Cochin            2  13882            9   \n",
       "3       IndiGo   Kolkata    Banglore            1   6218           12   \n",
       "4       IndiGo  Banglore   New Delhi            1  13302            1   \n",
       "\n",
       "   Journey_month  Dep_hour  Dep_min  Arrival_hour  Arrival_min  \\\n",
       "0              3        22       20             1           10   \n",
       "1              5         5       50            13           15   \n",
       "2              6         9       25             4           25   \n",
       "3              5        18        5            23           30   \n",
       "4              3        16       50            21           35   \n",
       "\n",
       "   Duration_hours  Duration_mins  Airline_Air India  Airline_GoAir  \\\n",
       "0               2             50              False          False   \n",
       "1               7             25               True          False   \n",
       "2              19              0              False          False   \n",
       "3               5             25              False          False   \n",
       "4               4             45              False          False   \n",
       "\n",
       "   Airline_IndiGo  Airline_Jet Airways  Airline_Jet Airways Business  \\\n",
       "0            True                False                         False   \n",
       "1           False                False                         False   \n",
       "2           False                 True                         False   \n",
       "3            True                False                         False   \n",
       "4            True                False                         False   \n",
       "\n",
       "   Airline_Multiple carriers  Airline_Multiple carriers Premium economy  \\\n",
       "0                      False                                      False   \n",
       "1                      False                                      False   \n",
       "2                      False                                      False   \n",
       "3                      False                                      False   \n",
       "4                      False                                      False   \n",
       "\n",
       "   Airline_SpiceJet  Airline_Trujet  Airline_Vistara  \\\n",
       "0             False           False            False   \n",
       "1             False           False            False   \n",
       "2             False           False            False   \n",
       "3             False           False            False   \n",
       "4             False           False            False   \n",
       "\n",
       "   Airline_Vistara Premium economy  Source_Chennai  Source_Delhi  \\\n",
       "0                            False           False         False   \n",
       "1                            False           False         False   \n",
       "2                            False           False          True   \n",
       "3                            False           False         False   \n",
       "4                            False           False         False   \n",
       "\n",
       "   Source_Kolkata  Source_Mumbai  Destination_Cochin  Destination_Delhi  \\\n",
       "0           False          False               False              False   \n",
       "1            True          False               False              False   \n",
       "2           False          False                True              False   \n",
       "3            True          False               False              False   \n",
       "4           False          False               False              False   \n",
       "\n",
       "   Destination_Hyderabad  Destination_Kolkata  Destination_New Delhi  \n",
       "0                  False                False                   True  \n",
       "1                  False                False                  False  \n",
       "2                  False                False                  False  \n",
       "3                  False                False                  False  \n",
       "4                  False                False                   True  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "183b5a5f-f5e5-409d-a8fc-33935ca4a235",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_train.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a6fca072-2dc6-4bc2-986c-c10aac5f6b70",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Price</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "      <th>Duration_hours</th>\n",
       "      <th>Duration_mins</th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>Airline_SpiceJet</th>\n",
       "      <th>Airline_Trujet</th>\n",
       "      <th>Airline_Vistara</th>\n",
       "      <th>Airline_Vistara Premium economy</th>\n",
       "      <th>Source_Chennai</th>\n",
       "      <th>Source_Delhi</th>\n",
       "      <th>Source_Kolkata</th>\n",
       "      <th>Source_Mumbai</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>3897</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>7662</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>13882</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>6218</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>13302</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total_Stops  Price  Journey_day  Journey_month  Dep_hour  Dep_min  \\\n",
       "0            0   3897           24              3        22       20   \n",
       "1            2   7662            1              5         5       50   \n",
       "2            2  13882            9              6         9       25   \n",
       "3            1   6218           12              5        18        5   \n",
       "4            1  13302            1              3        16       50   \n",
       "\n",
       "   Arrival_hour  Arrival_min  Duration_hours  Duration_mins  \\\n",
       "0             1           10               2             50   \n",
       "1            13           15               7             25   \n",
       "2             4           25              19              0   \n",
       "3            23           30               5             25   \n",
       "4            21           35               4             45   \n",
       "\n",
       "   Airline_Air India  Airline_GoAir  Airline_IndiGo  Airline_Jet Airways  \\\n",
       "0              False          False            True                False   \n",
       "1               True          False           False                False   \n",
       "2              False          False           False                 True   \n",
       "3              False          False            True                False   \n",
       "4              False          False            True                False   \n",
       "\n",
       "   Airline_Jet Airways Business  Airline_Multiple carriers  \\\n",
       "0                         False                      False   \n",
       "1                         False                      False   \n",
       "2                         False                      False   \n",
       "3                         False                      False   \n",
       "4                         False                      False   \n",
       "\n",
       "   Airline_Multiple carriers Premium economy  Airline_SpiceJet  \\\n",
       "0                                      False             False   \n",
       "1                                      False             False   \n",
       "2                                      False             False   \n",
       "3                                      False             False   \n",
       "4                                      False             False   \n",
       "\n",
       "   Airline_Trujet  Airline_Vistara  Airline_Vistara Premium economy  \\\n",
       "0           False            False                            False   \n",
       "1           False            False                            False   \n",
       "2           False            False                            False   \n",
       "3           False            False                            False   \n",
       "4           False            False                            False   \n",
       "\n",
       "   Source_Chennai  Source_Delhi  Source_Kolkata  Source_Mumbai  \\\n",
       "0           False         False           False          False   \n",
       "1           False         False            True          False   \n",
       "2           False          True           False          False   \n",
       "3           False         False            True          False   \n",
       "4           False         False           False          False   \n",
       "\n",
       "   Destination_Cochin  Destination_Delhi  Destination_Hyderabad  \\\n",
       "0               False              False                  False   \n",
       "1               False              False                  False   \n",
       "2                True              False                  False   \n",
       "3               False              False                  False   \n",
       "4               False              False                  False   \n",
       "\n",
       "   Destination_Kolkata  Destination_New Delhi  \n",
       "0                False                   True  \n",
       "1                False                  False  \n",
       "2                False                  False  \n",
       "3                False                  False  \n",
       "4                False                   True  "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "43567122-3e73-4f85-a8d9-4ebeb7124cbd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10682, 30)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "764d5a18-845a-436c-93cb-0ce6f9b18c36",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_data = pd.read_excel(\"Test_set.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "71f4f069-fcb4-495e-beee-b230b5c3a15b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Airline</th>\n",
       "      <th>Date_of_Journey</th>\n",
       "      <th>Source</th>\n",
       "      <th>Destination</th>\n",
       "      <th>Route</th>\n",
       "      <th>Dep_Time</th>\n",
       "      <th>Arrival_Time</th>\n",
       "      <th>Duration</th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Additional_Info</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>6/06/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>17:30</td>\n",
       "      <td>04:25 07 Jun</td>\n",
       "      <td>10h 55m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>IndiGo</td>\n",
       "      <td>12/05/2019</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>CCU → MAA → BLR</td>\n",
       "      <td>06:20</td>\n",
       "      <td>10:20</td>\n",
       "      <td>4h</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Jet Airways</td>\n",
       "      <td>21/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>19:15</td>\n",
       "      <td>19:00 22 May</td>\n",
       "      <td>23h 45m</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>In-flight meal not included</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Multiple carriers</td>\n",
       "      <td>21/05/2019</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>Cochin</td>\n",
       "      <td>DEL → BOM → COK</td>\n",
       "      <td>08:00</td>\n",
       "      <td>21:00</td>\n",
       "      <td>13h</td>\n",
       "      <td>1 stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Air Asia</td>\n",
       "      <td>24/06/2019</td>\n",
       "      <td>Banglore</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>BLR → DEL</td>\n",
       "      <td>23:55</td>\n",
       "      <td>02:45 25 Jun</td>\n",
       "      <td>2h 50m</td>\n",
       "      <td>non-stop</td>\n",
       "      <td>No info</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Airline Date_of_Journey    Source Destination            Route  \\\n",
       "0        Jet Airways       6/06/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "1             IndiGo      12/05/2019   Kolkata    Banglore  CCU → MAA → BLR   \n",
       "2        Jet Airways      21/05/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "3  Multiple carriers      21/05/2019     Delhi      Cochin  DEL → BOM → COK   \n",
       "4           Air Asia      24/06/2019  Banglore       Delhi        BLR → DEL   \n",
       "\n",
       "  Dep_Time  Arrival_Time Duration Total_Stops              Additional_Info  \n",
       "0    17:30  04:25 07 Jun  10h 55m      1 stop                      No info  \n",
       "1    06:20         10:20       4h      1 stop                      No info  \n",
       "2    19:15  19:00 22 May  23h 45m      1 stop  In-flight meal not included  \n",
       "3    08:00         21:00      13h      1 stop                      No info  \n",
       "4    23:55  02:45 25 Jun   2h 50m    non-stop                      No info  "
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "3cb4ac14-b2cb-433f-a7db-916f0c201d35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test data Info\n",
      "---------------------------------------------------------------------------\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2671 entries, 0 to 2670\n",
      "Data columns (total 10 columns):\n",
      " #   Column           Non-Null Count  Dtype \n",
      "---  ------           --------------  ----- \n",
      " 0   Airline          2671 non-null   object\n",
      " 1   Date_of_Journey  2671 non-null   object\n",
      " 2   Source           2671 non-null   object\n",
      " 3   Destination      2671 non-null   object\n",
      " 4   Route            2671 non-null   object\n",
      " 5   Dep_Time         2671 non-null   object\n",
      " 6   Arrival_Time     2671 non-null   object\n",
      " 7   Duration         2671 non-null   object\n",
      " 8   Total_Stops      2671 non-null   object\n",
      " 9   Additional_Info  2671 non-null   object\n",
      "dtypes: object(10)\n",
      "memory usage: 208.8+ KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "print(\"Test data Info\")\n",
    "print(\"-\"*75)\n",
    "print(test_data.info())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "e7fd517b-a39e-4677-aa34-3a69211a43bd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Null values :\n",
      "---------------------------------------------------------------------------\n",
      "Airline            0\n",
      "Date_of_Journey    0\n",
      "Source             0\n",
      "Destination        0\n",
      "Route              0\n",
      "Dep_Time           0\n",
      "Arrival_Time       0\n",
      "Duration           0\n",
      "Total_Stops        0\n",
      "Additional_Info    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Null values :\")\n",
    "print(\"-\"*75)\n",
    "test_data.dropna(inplace = True)\n",
    "print(test_data.isnull().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "dc2b910a-391a-486f-b75b-54d6db2d3f23",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Date_of_Journey\n",
    "test_data[\"Journey_day\"] = pd.to_datetime(test_data.Date_of_Journey, format=\"%d/%m/%Y\").dt.day\n",
    "test_data[\"Journey_month\"] = pd.to_datetime(test_data[\"Date_of_Journey\"], format = \"%d/%m/%Y\").dt.month\n",
    "test_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "8e6fc950-a3db-4136-a5ea-90ab40e80b24",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\2772549918.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  test_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour\n",
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\2772549918.py:3: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  test_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute\n"
     ]
    }
   ],
   "source": [
    "# Dep_Time\n",
    "test_data[\"Dep_hour\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.hour\n",
    "test_data[\"Dep_min\"] = pd.to_datetime(test_data[\"Dep_Time\"]).dt.minute\n",
    "test_data.drop([\"Dep_Time\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c5e52456-7440-4620-81d2-910592acc05a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1225477276.py:1: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  test_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\n",
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\1225477276.py:2: UserWarning: Could not infer format, so each element will be parsed individually, falling back to `dateutil`. To ensure parsing is consistent and as-expected, please specify a format.\n",
      "  test_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute\n"
     ]
    }
   ],
   "source": [
    "test_data[\"Arrival_hour\"] = pd.to_datetime(test_data.Arrival_Time).dt.hour\n",
    "test_data[\"Arrival_min\"] = pd.to_datetime(test_data.Arrival_Time).dt.minute\n",
    "test_data.drop([\"Arrival_Time\"], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "3ee7de0d-43bb-4cf3-b9f4-f84a7d9391e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Duration\n",
    "duration = list(test_data[\"Duration\"])\n",
    "\n",
    "for i in range(len(duration)):\n",
    "    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n",
    "        if \"h\" in duration[i]:\n",
    "            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n",
    "        else:\n",
    "            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n",
    "\n",
    "duration_hours = []\n",
    "duration_mins = []\n",
    "for i in range(len(duration)):\n",
    "    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n",
    "    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration\n",
    "\n",
    "# Adding Duration column to test set\n",
    "test_data[\"Duration_hours\"] = duration_hours\n",
    "test_data[\"Duration_mins\"] = duration_mins\n",
    "test_data.drop([\"Duration\"], axis = 1, inplace = True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "748456a3-44ef-441f-8f75-5a2d7ff2ce71",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Airline\n",
      "---------------------------------------------------------------------------\n",
      "Airline\n",
      "Jet Airways                          897\n",
      "IndiGo                               511\n",
      "Air India                            440\n",
      "Multiple carriers                    347\n",
      "SpiceJet                             208\n",
      "Vistara                              129\n",
      "Air Asia                              86\n",
      "GoAir                                 46\n",
      "Multiple carriers Premium economy      3\n",
      "Vistara Premium economy                2\n",
      "Jet Airways Business                   2\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Airline\")\n",
    "print(\"-\"*75)\n",
    "print(test_data[\"Airline\"].value_counts())\n",
    "Airline = pd.get_dummies(test_data[\"Airline\"], drop_first= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "79ab6439-0231-4f7d-b220-80aa88750462",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Source\n",
      "---------------------------------------------------------------------------\n",
      "Source\n",
      "Delhi       1145\n",
      "Kolkata      710\n",
      "Banglore     555\n",
      "Mumbai       186\n",
      "Chennai       75\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Source\")\n",
    "print(\"-\"*75)\n",
    "print(test_data[\"Source\"].value_counts())\n",
    "Source = pd.get_dummies(test_data[\"Source\"], drop_first= True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "54d87e97-7468-4674-9c10-af79fff2a1dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Destination\n",
      "---------------------------------------------------------------------------\n",
      "Destination\n",
      "Cochin       1145\n",
      "Banglore      710\n",
      "Delhi         317\n",
      "New Delhi     238\n",
      "Hyderabad     186\n",
      "Kolkata        75\n",
      "Name: count, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(\"Destination\")\n",
    "print(\"-\"*75)\n",
    "print(test_data[\"Destination\"].value_counts())\n",
    "Destination = pd.get_dummies(test_data[\"Destination\"], drop_first = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "5a13787a-a911-4dd5-a387-c48a45ab0edf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Additional_Info contains almost 80% no_info\n",
    "# Route and Total_Stops are related to each other\n",
    "test_data.drop([\"Route\", \"Additional_Info\"], axis=1, inplace=True, errors='ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "9148ca64-11a8-4817-a27e-ed9662b0527c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\DataScienceClass\\AppData\\Local\\Temp\\ipykernel_7584\\2899410680.py:2: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n",
      "  test_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n"
     ]
    }
   ],
   "source": [
    "# Replacing Total_Stops\n",
    "test_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "38eb54c7-6dbf-42bf-bc41-4421023bb0c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing Total_Stops\n",
    "test_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "645d482d-a091-4d3f-ae4a-5b7454c23397",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Concatenate dataframe --> test_data + Airline + Source + Destination\n",
    "data_test = pd.concat([test_data, Airline, Source, Destination], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "c4b4ec56-04ed-462d-866e-e63f9ef43744",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape of test data :  (2671, 31)\n"
     ]
    }
   ],
   "source": [
    "print(\"Shape of test data : \", data_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "3e1bb31b-739c-47a4-8cff-d4053697576f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "9255319e-12ba-473c-8953-d74cbb41c2c4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10682, 30)"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "9cea7cd6-1405-4d3e-afcd-ca8b46252212",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Total_Stops', 'Price', 'Journey_day', 'Journey_month', 'Dep_hour',\n",
       "       'Dep_min', 'Arrival_hour', 'Arrival_min', 'Duration_hours',\n",
       "       'Duration_mins', 'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',\n",
       "       'Airline_Jet Airways', 'Airline_Jet Airways Business',\n",
       "       'Airline_Multiple carriers',\n",
       "       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',\n",
       "       'Airline_Trujet', 'Airline_Vistara', 'Airline_Vistara Premium economy',\n",
       "       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',\n",
       "       'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad',\n",
       "       'Destination_Kolkata', 'Destination_New Delhi'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_train.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "63344ed2-f92a-473b-a90a-6823c306847f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total_Stops</th>\n",
       "      <th>Journey_day</th>\n",
       "      <th>Journey_month</th>\n",
       "      <th>Dep_hour</th>\n",
       "      <th>Dep_min</th>\n",
       "      <th>Arrival_hour</th>\n",
       "      <th>Arrival_min</th>\n",
       "      <th>Duration_hours</th>\n",
       "      <th>Duration_mins</th>\n",
       "      <th>Airline_Air India</th>\n",
       "      <th>Airline_GoAir</th>\n",
       "      <th>Airline_IndiGo</th>\n",
       "      <th>Airline_Jet Airways</th>\n",
       "      <th>Airline_Jet Airways Business</th>\n",
       "      <th>Airline_Multiple carriers</th>\n",
       "      <th>Airline_Multiple carriers Premium economy</th>\n",
       "      <th>Airline_SpiceJet</th>\n",
       "      <th>Airline_Trujet</th>\n",
       "      <th>Airline_Vistara</th>\n",
       "      <th>Airline_Vistara Premium economy</th>\n",
       "      <th>Source_Chennai</th>\n",
       "      <th>Source_Delhi</th>\n",
       "      <th>Source_Kolkata</th>\n",
       "      <th>Source_Mumbai</th>\n",
       "      <th>Destination_Cochin</th>\n",
       "      <th>Destination_Delhi</th>\n",
       "      <th>Destination_Hyderabad</th>\n",
       "      <th>Destination_Kolkata</th>\n",
       "      <th>Destination_New Delhi</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>3</td>\n",
       "      <td>22</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>13</td>\n",
       "      <td>15</td>\n",
       "      <td>7</td>\n",
       "      <td>25</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>5</td>\n",
       "      <td>18</td>\n",
       "      <td>5</td>\n",
       "      <td>23</td>\n",
       "      <td>30</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>16</td>\n",
       "      <td>50</td>\n",
       "      <td>21</td>\n",
       "      <td>35</td>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Total_Stops  Journey_day  Journey_month  Dep_hour  Dep_min  Arrival_hour  \\\n",
       "0            0           24              3        22       20             1   \n",
       "1            2            1              5         5       50            13   \n",
       "2            2            9              6         9       25             4   \n",
       "3            1           12              5        18        5            23   \n",
       "4            1            1              3        16       50            21   \n",
       "\n",
       "   Arrival_min  Duration_hours  Duration_mins  Airline_Air India  \\\n",
       "0           10               2             50              False   \n",
       "1           15               7             25               True   \n",
       "2           25              19              0              False   \n",
       "3           30               5             25              False   \n",
       "4           35               4             45              False   \n",
       "\n",
       "   Airline_GoAir  Airline_IndiGo  Airline_Jet Airways  \\\n",
       "0          False            True                False   \n",
       "1          False           False                False   \n",
       "2          False           False                 True   \n",
       "3          False            True                False   \n",
       "4          False            True                False   \n",
       "\n",
       "   Airline_Jet Airways Business  Airline_Multiple carriers  \\\n",
       "0                         False                      False   \n",
       "1                         False                      False   \n",
       "2                         False                      False   \n",
       "3                         False                      False   \n",
       "4                         False                      False   \n",
       "\n",
       "   Airline_Multiple carriers Premium economy  Airline_SpiceJet  \\\n",
       "0                                      False             False   \n",
       "1                                      False             False   \n",
       "2                                      False             False   \n",
       "3                                      False             False   \n",
       "4                                      False             False   \n",
       "\n",
       "   Airline_Trujet  Airline_Vistara  Airline_Vistara Premium economy  \\\n",
       "0           False            False                            False   \n",
       "1           False            False                            False   \n",
       "2           False            False                            False   \n",
       "3           False            False                            False   \n",
       "4           False            False                            False   \n",
       "\n",
       "   Source_Chennai  Source_Delhi  Source_Kolkata  Source_Mumbai  \\\n",
       "0           False         False           False          False   \n",
       "1           False         False            True          False   \n",
       "2           False          True           False          False   \n",
       "3           False         False            True          False   \n",
       "4           False         False           False          False   \n",
       "\n",
       "   Destination_Cochin  Destination_Delhi  Destination_Hyderabad  \\\n",
       "0               False              False                  False   \n",
       "1               False              False                  False   \n",
       "2                True              False                  False   \n",
       "3               False              False                  False   \n",
       "4               False              False                  False   \n",
       "\n",
       "   Destination_Kolkata  Destination_New Delhi  \n",
       "0                False                   True  \n",
       "1                False                  False  \n",
       "2                False                  False  \n",
       "3                False                  False  \n",
       "4                False                   True  "
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data_train.loc[:, ['Total_Stops', 'Journey_day', 'Journey_month', 'Dep_hour',\n",
    "       'Dep_min', 'Arrival_hour', 'Arrival_min', 'Duration_hours',\n",
    "       'Duration_mins', 'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',\n",
    "       'Airline_Jet Airways', 'Airline_Jet Airways Business',\n",
    "       'Airline_Multiple carriers',\n",
    "       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',\n",
    "       'Airline_Trujet', 'Airline_Vistara', 'Airline_Vistara Premium economy',\n",
    "       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',\n",
    "       'Destination_Cochin', 'Destination_Delhi', 'Destination_Hyderabad',\n",
    "       'Destination_Kolkata', 'Destination_New Delhi']]\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "8d0b0a46-e0a7-41df-a3b5-36abc2b821ef",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     3897\n",
       "1     7662\n",
       "2    13882\n",
       "3     6218\n",
       "4    13302\n",
       "Name: Price, dtype: int64"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data_train.iloc[:, 1]: This selects all rows (:) from the second column (index 1) of the data_train DataFrame. \n",
    "# In this context, the second column is likely the \"Price\" column, which represents the prices of the flights.\n",
    "y = data_train.iloc[:, 1]\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "7e382b06-a4cc-417a-aa04-2ad9234a2783",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x1800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Select only numeric columns for correlation\n",
    "numeric_data = train_data.select_dtypes(include=[np.number])\n",
    "\n",
    "# Find correlation between Independent and dependent attributes\n",
    "plt.figure(figsize=(18, 18))\n",
    "sns.heatmap(numeric_data.corr(), annot=True, cmap=\"RdYlGn\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "d4503ba0-787f-4b48-a029-095018ec9d35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ExtraTreesRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;ExtraTreesRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.ExtraTreesRegressor.html\">?<span>Documentation for ExtraTreesRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>ExtraTreesRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "ExtraTreesRegressor()"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Important feature using ExtraTreesRegressor\n",
    "\n",
    "from sklearn.ensemble import ExtraTreesRegressor\n",
    "selection = ExtraTreesRegressor()\n",
    "selection.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "cc0cb168-54e7-484f-ac99-821426110b49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2.37629549e-01 1.42122536e-01 5.40208826e-02 2.43717664e-02\n",
      " 2.08526724e-02 2.82964876e-02 1.97033413e-02 1.22744777e-01\n",
      " 1.75915125e-02 9.51761421e-03 1.84542410e-03 1.77924272e-02\n",
      " 1.37063745e-01 6.71376561e-02 1.82578411e-02 9.08657102e-04\n",
      " 3.07818391e-03 1.06059253e-04 5.05448506e-03 9.15499922e-05\n",
      " 5.51927295e-04 8.31144729e-03 3.33342439e-03 6.70765350e-03\n",
      " 9.12880886e-03 1.26399552e-02 5.35048821e-03 6.82056990e-04\n",
      " 2.51070704e-02]\n"
     ]
    }
   ],
   "source": [
    "print(selection.feature_importances_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "c5c3b08b-e49e-4504-9ebe-39c8d45c7e3f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "\n",
    "# Create a horizontal bar plot for the top 20 feature importances\n",
    "plt.figure(figsize=(12, 8))\n",
    "feat_importances = pd.Series(selection.feature_importances_, index=X.columns)\n",
    "\n",
    "# Plot the top 20 feature importances\n",
    "feat_importances.nlargest(20).plot(kind='barh', color='orange')\n",
    "\n",
    "# Adding titles and labels\n",
    "plt.title('Top 20 Feature Importances', fontsize=16)\n",
    "plt.xlabel('Importance Score', fontsize=14)\n",
    "plt.ylabel('Features', fontsize=14)\n",
    "plt.grid(axis='x', linestyle='--', alpha=0.7)\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "d040b4ec-f66d-4443-9dde-adbb01e1641b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "f4d835d0-afed-4b85-b8a9-e64c632c7df2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestRegressor()"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "reg_rf = RandomForestRegressor()\n",
    "reg_rf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "6e856dce-fbcb-4755-a3d5-744c2926ce6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = reg_rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "0b8e97e9-d625-4058-9226-700aa33eb071",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9538393234355551"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_rf.score(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "3205c336-dc9e-44a8-9246-a6e521b2188d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7961450648921397"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reg_rf.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "f68f9c97-189c-425d-b6d1-923858c286e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the distribution of the residuals (y_test - y_pred) using histplot\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.histplot(y_test - y_pred, bins=30, kde=True)  # Add kde=True for a density curve\n",
    "plt.title('Distribution of Residuals')\n",
    "plt.xlabel('Residuals (y_test - y_pred)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "2e5cb44f-8ef2-46b2-9c51-9fb491468909",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_test, y_pred, alpha = 0.5)\n",
    "plt.xlabel(\"y_test\")\n",
    "plt.ylabel(\"y_pred\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "82140c1f-2625-4138-84c0-2227c0c525c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 1180.836662357582\n",
      "MSE: 4395531.592754031\n",
      "RMSE: 2096.55231099871\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "print('MAE:', metrics.mean_absolute_error(y_test, y_pred))\n",
    "print('MSE:', metrics.mean_squared_error(y_test, y_pred))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "5cac916a-ebe4-4700-9fd8-70ff0e79ede4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.026887077025966846"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# RMSE/(max(DV)-min(DV))\n",
    "\n",
    "2090.5509/(max(y)-min(y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "b1c3ef16-1cff-44b8-84e3-7c6279e342b7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7961450648921397"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metrics.r2_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "daa703ef-95f8-4487-a988-585f818e5494",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "8e9cb700-75fd-462f-b663-b2d1d4ce8ca0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Randomized Search CV\n",
    "\n",
    "# Number of trees in random forest\n",
    "n_estimators = [int(x) for x in np.linspace(start=100, stop=1200, num=12)]\n",
    "# Number of features to consider at every split\n",
    "max_features = ['sqrt', 'log2']  # Removed 'auto' to avoid error\n",
    "# Maximum number of levels in tree\n",
    "max_depth = [int(x) for x in np.linspace(5, 30, num=6)]\n",
    "# Minimum number of samples required to split a node\n",
    "min_samples_split = [2, 5, 10, 15, 100]\n",
    "# Minimum number of samples required at each leaf node\n",
    "min_samples_leaf = [1, 2, 5, 10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "6fd210f6-564c-46de-8d69-339a6c02a2cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the random grid\n",
    "\n",
    "random_grid = {'n_estimators': n_estimators,\n",
    "               'max_features': max_features,\n",
    "               'max_depth': max_depth,\n",
    "               'min_samples_split': min_samples_split,\n",
    "               'min_samples_leaf': min_samples_leaf}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "c3bb21c8-8a69-4d29-8038-4e36e9bb18f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Random search of parameters, using 5 fold cross validation, \n",
    "# search across 100 different combinations\n",
    "rf_random = RandomizedSearchCV(estimator = reg_rf, param_distributions = random_grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "3d4b61b8-bd9a-4d08-aea1-05eab2e76436",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 10 candidates, totalling 50 fits\n",
      "[CV] END max_depth=10, max_features=log2, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=10, max_features=log2, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.0s\n",
      "[CV] END max_depth=10, max_features=log2, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=log2, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   3.1s\n",
      "[CV] END max_depth=10, max_features=log2, min_samples_leaf=5, min_samples_split=5, n_estimators=900; total time=   2.9s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   4.8s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   5.1s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   4.8s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   4.6s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=1100; total time=   4.3s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.9s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=100, n_estimators=300; total time=   0.8s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   1.6s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=15, max_features=sqrt, min_samples_leaf=5, min_samples_split=5, n_estimators=400; total time=   1.5s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   2.6s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=10, min_samples_split=5, n_estimators=700; total time=   2.3s\n",
      "[CV] END max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   7.6s\n",
      "[CV] END max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   7.8s\n",
      "[CV] END max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   7.8s\n",
      "[CV] END max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   7.7s\n",
      "[CV] END max_depth=25, max_features=log2, min_samples_leaf=1, min_samples_split=2, n_estimators=1000; total time=   7.9s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.7s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.5s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=10, min_samples_split=15, n_estimators=1100; total time=   2.1s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.0s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.1s\n",
      "[CV] END max_depth=15, max_features=log2, min_samples_leaf=1, min_samples_split=15, n_estimators=300; total time=   1.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.3s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.2s\n",
      "[CV] END max_depth=5, max_features=log2, min_samples_leaf=2, min_samples_split=10, n_estimators=700; total time=   1.2s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   2.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   2.8s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   3.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   3.0s\n",
      "[CV] END max_depth=20, max_features=sqrt, min_samples_leaf=1, min_samples_split=15, n_estimators=700; total time=   2.8s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=1,\n",
       "                   param_distributions={&#x27;max_depth&#x27;: [5, 10, 15, 20, 25, 30],\n",
       "                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                                        &#x27;min_samples_leaf&#x27;: [1, 2, 5, 10],\n",
       "                                        &#x27;min_samples_split&#x27;: [2, 5, 10, 15,\n",
       "                                                              100],\n",
       "                                        &#x27;n_estimators&#x27;: [100, 200, 300, 400,\n",
       "                                                         500, 600, 700, 800,\n",
       "                                                         900, 1000, 1100,\n",
       "                                                         1200]},\n",
       "                   random_state=42, scoring=&#x27;neg_mean_squared_error&#x27;,\n",
       "                   verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomizedSearchCV<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.model_selection.RandomizedSearchCV.html\">?<span>Documentation for RandomizedSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=1,\n",
       "                   param_distributions={&#x27;max_depth&#x27;: [5, 10, 15, 20, 25, 30],\n",
       "                                        &#x27;max_features&#x27;: [&#x27;sqrt&#x27;, &#x27;log2&#x27;],\n",
       "                                        &#x27;min_samples_leaf&#x27;: [1, 2, 5, 10],\n",
       "                                        &#x27;min_samples_split&#x27;: [2, 5, 10, 15,\n",
       "                                                              100],\n",
       "                                        &#x27;n_estimators&#x27;: [100, 200, 300, 400,\n",
       "                                                         500, 600, 700, 800,\n",
       "                                                         900, 1000, 1100,\n",
       "                                                         1200]},\n",
       "                   random_state=42, scoring=&#x27;neg_mean_squared_error&#x27;,\n",
       "                   verbose=2)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;RandomForestRegressor<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.ensemble.RandomForestRegressor.html\">?<span>Documentation for RandomForestRegressor</span></a></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestRegressor()</pre></div> </div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(), n_jobs=1,\n",
       "                   param_distributions={'max_depth': [5, 10, 15, 20, 25, 30],\n",
       "                                        'max_features': ['sqrt', 'log2'],\n",
       "                                        'min_samples_leaf': [1, 2, 5, 10],\n",
       "                                        'min_samples_split': [2, 5, 10, 15,\n",
       "                                                              100],\n",
       "                                        'n_estimators': [100, 200, 300, 400,\n",
       "                                                         500, 600, 700, 800,\n",
       "                                                         900, 1000, 1100,\n",
       "                                                         1200]},\n",
       "                   random_state=42, scoring='neg_mean_squared_error',\n",
       "                   verbose=2)"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_random.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "4aef70cb-31c5-4431-b57f-8cfc431f68c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_estimators': 700,\n",
       " 'min_samples_split': 15,\n",
       " 'min_samples_leaf': 1,\n",
       " 'max_features': 'sqrt',\n",
       " 'max_depth': 20}"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf_random.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "04ba564f-ca17-4761-9af6-0e77d73a4739",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This line uses the trained Random Forest model (rf_random) to predict the flight prices on the test dataset (X_test).\n",
    "prediction = rf_random.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "32b23181-63c2-4cc5-a0c1-a0313b0c7a06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8, 8))\n",
    "sns.histplot(y_test - prediction, kde=True)  # Using histplot instead of distplot\n",
    "plt.xlabel('Prediction Error')\n",
    "plt.title('Distribution of Prediction Errors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "12c55928-354b-4f93-915e-43eb0ca8d92b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize = (8,8))\n",
    "plt.scatter(y_test, prediction, alpha = 0.5)\n",
    "plt.xlabel(\"y_test\")\n",
    "plt.ylabel(\"y_pred\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "b65361e9-9d48-4260-bd68-a7f1f2d8998d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE: 1288.6693322496394\n",
      "MSE: 3884120.473782605\n",
      "RMSE: 1970.8172096322392\n"
     ]
    }
   ],
   "source": [
    "print('MAE:', metrics.mean_absolute_error(y_test, prediction))\n",
    "print('MSE:', metrics.mean_squared_error(y_test, prediction))\n",
    "print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "6cd4154c-78f0-4564-8319-815c879de312",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Accuracy (R² Score): 79.61%\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "# Predictions on the test set\n",
    "y_pred = reg_rf.predict(X_test)\n",
    "\n",
    "# Calculate the R² score\n",
    "r2 = r2_score(y_test, y_pred)\n",
    "\n",
    "print(f\"Model Accuracy (R² Score): {r2 * 100:.2f}%\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ce53047-e493-4110-bfc8-3e4aa50e96c6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
